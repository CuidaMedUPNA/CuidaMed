// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { createIntake, createTreatment, deleteIntake, deleteTreatment, getIntakesByTreatment, getTreatments, healthCheck, type Options } from '../sdk.gen';
import type { CreateIntakeData, CreateIntakeError, CreateIntakeResponse, CreateTreatmentData, CreateTreatmentError, CreateTreatmentResponse, DeleteIntakeData, DeleteIntakeError, DeleteIntakeResponse, DeleteTreatmentData, DeleteTreatmentError, DeleteTreatmentResponse, GetIntakesByTreatmentData, GetTreatmentsData, HealthCheckData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const healthCheckQueryKey = (options?: Options<HealthCheckData>) => createQueryKey('healthCheck', options);

/**
 * Health check
 */
export const healthCheckOptions = (options?: Options<HealthCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckQueryKey(options)
    });
};

export const getTreatmentsQueryKey = (options: Options<GetTreatmentsData>) => createQueryKey('getTreatments', options);

/**
 * Obtener todos los tratamientos de un usuario
 */
export const getTreatmentsOptions = (options: Options<GetTreatmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTreatments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTreatmentsQueryKey(options)
    });
};

/**
 * Crear tratamiento
 */
export const createTreatmentMutation = (options?: Partial<Options<CreateTreatmentData>>): UseMutationOptions<CreateTreatmentResponse, CreateTreatmentError, Options<CreateTreatmentData>> => {
    const mutationOptions: UseMutationOptions<CreateTreatmentResponse, CreateTreatmentError, Options<CreateTreatmentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createTreatment({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Eliminar un tratamiento
 */
export const deleteTreatmentMutation = (options?: Partial<Options<DeleteTreatmentData>>): UseMutationOptions<DeleteTreatmentResponse, DeleteTreatmentError, Options<DeleteTreatmentData>> => {
    const mutationOptions: UseMutationOptions<DeleteTreatmentResponse, DeleteTreatmentError, Options<DeleteTreatmentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteTreatment({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIntakesByTreatmentQueryKey = (options: Options<GetIntakesByTreatmentData>) => createQueryKey('getIntakesByTreatment', options);

/**
 * Obtener tomas de un tratamiento
 */
export const getIntakesByTreatmentOptions = (options: Options<GetIntakesByTreatmentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIntakesByTreatment({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIntakesByTreatmentQueryKey(options)
    });
};

/**
 * AÃ±adir una toma de medicamento a un tratamiento
 */
export const createIntakeMutation = (options?: Partial<Options<CreateIntakeData>>): UseMutationOptions<CreateIntakeResponse, CreateIntakeError, Options<CreateIntakeData>> => {
    const mutationOptions: UseMutationOptions<CreateIntakeResponse, CreateIntakeError, Options<CreateIntakeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIntake({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Eliminar una toma de medicamento de un tratamiento
 */
export const deleteIntakeMutation = (options?: Partial<Options<DeleteIntakeData>>): UseMutationOptions<DeleteIntakeResponse, DeleteIntakeError, Options<DeleteIntakeData>> => {
    const mutationOptions: UseMutationOptions<DeleteIntakeResponse, DeleteIntakeError, Options<DeleteIntakeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteIntake({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
