// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { getMedicationTake, getUsers, healthCheck, type Options } from '../sdk.gen';
import type { GetMedicationTakeData, GetUsersData, HealthCheckData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const healthCheckQueryKey = (options?: Options<HealthCheckData>) => createQueryKey('healthCheck', options);

/**
 * Health check
 */
export const healthCheckOptions = (options?: Options<HealthCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckQueryKey(options)
    });
};

export const getUsersQueryKey = (options?: Options<GetUsersData>) => createQueryKey('getUsers', options);

/**
 * Obtener usuarios
 */
export const getUsersOptions = (options?: Options<GetUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersQueryKey(options)
    });
};

export const getMedicationTakeQueryKey = (options?: Options<GetMedicationTakeData>) => createQueryKey('getMedicationTake', options);

/**
 * Toma de medicamento
 */
export const getMedicationTakeOptions = (options?: Options<GetMedicationTakeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMedicationTake({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMedicationTakeQueryKey(options)
    });
};
