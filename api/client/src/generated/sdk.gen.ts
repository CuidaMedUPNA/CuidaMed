// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateIntakeData, CreateIntakeErrors, CreateIntakeResponses, CreateTreatmentData, CreateTreatmentErrors, CreateTreatmentResponses, DeleteIntakeData, DeleteIntakeErrors, DeleteIntakeResponses, DeleteTreatmentData, DeleteTreatmentErrors, DeleteTreatmentResponses, GetIntakesByTreatmentData, GetIntakesByTreatmentErrors, GetIntakesByTreatmentResponses, GetTreatmentsData, GetTreatmentsErrors, GetTreatmentsResponses, HealthCheckData, HealthCheckResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health check
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Obtener todos los tratamientos de un usuario
 */
export const getTreatments = <ThrowOnError extends boolean = false>(options: Options<GetTreatmentsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTreatmentsResponses, GetTreatmentsErrors, ThrowOnError>({
        url: '/treatments',
        ...options
    });
};

/**
 * Crear tratamiento
 */
export const createTreatment = <ThrowOnError extends boolean = false>(options: Options<CreateTreatmentData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTreatmentResponses, CreateTreatmentErrors, ThrowOnError>({
        url: '/treatments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Eliminar un tratamiento
 */
export const deleteTreatment = <ThrowOnError extends boolean = false>(options: Options<DeleteTreatmentData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTreatmentResponses, DeleteTreatmentErrors, ThrowOnError>({
        url: '/treatments/{treatmentId}',
        ...options
    });
};

/**
 * Obtener tomas de un tratamiento
 */
export const getIntakesByTreatment = <ThrowOnError extends boolean = false>(options: Options<GetIntakesByTreatmentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetIntakesByTreatmentResponses, GetIntakesByTreatmentErrors, ThrowOnError>({
        url: '/treatments/{treatmentId}',
        ...options
    });
};

/**
 * AÃ±adir una toma de medicamento a un tratamiento
 */
export const createIntake = <ThrowOnError extends boolean = false>(options: Options<CreateIntakeData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateIntakeResponses, CreateIntakeErrors, ThrowOnError>({
        url: '/treatments/{treatmentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Eliminar una toma de medicamento de un tratamiento
 */
export const deleteIntake = <ThrowOnError extends boolean = false>(options: Options<DeleteIntakeData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteIntakeResponses, DeleteIntakeErrors, ThrowOnError>({
        url: '/treatments/{treatmentId}/intakes/{intakeId}',
        ...options
    });
};
